# 3-1 项目分析及会员登录
微电影网站
前台模块(home)
数据模型：modles.py
表单处理：home/forms.py
模板处理：templates/home
静态目录：static

后台模块(admin)
数据模型：modles.py
表单处理：admin/forms.py
模型目录：templates/admin
静态目录：static

蓝图构建目录
1. 定义蓝图(app/admin/__init__.py)
from flask import Blueprint
admin = Blueprint("admin", __name__)
import views

2. 注册蓝图(app/__init__.py)
from admin import admin as admin_blueprint
app.register_blueprint(admin_blueprint, url_prefix="/admin")

3. 调用蓝图
from . import admin
@admin.route("/")

会员及会员登录日志数据模块设计
1. 安装数据库连接依赖包
pip install flask-sqlalchemy

2. 定义sqlite数据库连接
form flask_sqlalchemy import SQLAlchemy
from flask import Flask

import os
basedir = os.path.abspath(os.path.dirname(__file__))

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + os.path.join(basedir, 'data.sqlite')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = True
db = SQLAlchemy(app)

3. 定义会员数据模型
id = 编号
name = 账号
pwd = 密码
email = 邮箱
phone = 手机号
info = 简介
face = 头像
addtime = 注册时间
uuid = 唯一标志符


# 3-2 标签-电影-上映预告数据模型设计

定义标签数据模型
id: 编号
name: 标题
movies: 电影外键关联
addtime: 创建时间

定义电影数据模型
id: 编号
title: 电影标题
url: 电影地址
info: 电影简介
logo: 电影封面
star: 星级
playnum: 电影播放量
commentnum: 电影评论量
tag_id: 所属标签
area: 地区
release_time: 发布时间
length: 电影长度
addtime: 添加时间
comments: 电影评论外键关联
moviecol: 电影收藏外键关联

定义上映预告数据模型
id: 编号
title: 上映预告标题
logo: 上映预告封面
addtime: 创建时间



# 3-3 评论-收藏-权限-角色-管理员-操作日志数据模型设计

定义评论数据模型
id: 编号
content: 评论内容
movie_id: 所属电影
user_id: 所属用户
addtime: 最近登录时间


定义收藏电影数据模型
id: 编号
movie_id: 所属电影
user_id: 所属用户
addtime: 最近登录时间

定义权限数据模型
id: 编号
name: 名称
url: 地址
addtime: 创建时间

定义角色数据模型
id: 编号
name: 名称
auths: 权限列表
addtime: 创建时间
admins: 管理员外键关联

管理员、登录日志、操作日志数据模型设计

定义管理员数据模型

name: 管理员名称
pwd: 管理员密码
is_super: 是否是超级管理员
role_id: 角色编号
addtime: 创建时间
adminlogs: 管理员登录日志外键关联
oplogs: 操作日志外键关联

定义管理员登录日志数据模型
id: 编号
admin_id: 所属管理员编号
ip: 最近登录IP地址
addtime: 最近登录时间

定义操作日志
id: 编号
admin_id: 所属管理员编号
ip: 操作IP地址
reason: 操作原因
addtime: 创建时间

# 4-1 前台布局-会员登录页面搭建

搭建前台页面

前台布局搭建
1. 静态文件引入: {{ url_for('static',filename='文件路径) }}
2. 定义路由: {{ url_for('模块名.视图名'， 变量=参数) }}
3. 定义数据块: {% block 数据块名称 %}...{% endblock %}

会员登录页面搭建

# 登录
@home.route("/login/")
def login():
    return render_template("home/login.html")

# 退出
@home.route("/logout")
def logout():
    return redirect(url_for("home.login"))

# 4-2 会员注册-会员中心页面搭建
# 注册
@home.route("/register/")
def register():
    return render_template("home/register.html")

会员中心页面搭建
# 会员中心
@home.route("/user/")

# 修改密码
@home.route("/pwd/")

# 评论记录
@home.route("/comments/")

# 登录日志
@home.route("/loginlog/")

# 收藏电影
@home.route("/moviecol/")


# 4-3 电影列表-搜索页面搭建

电影列表页面搭建
# 列表
@home.route("/")
def index():
    return render_template("home/index.html")

# 动画
@home.route("/animation/")
def animation():
    return render_template("home/animation.html")

电影搜索页面搭建
# 搜索
@home.route("/search/")
def search():
    return render_template("home/search.html")

# 4-4 电影详情页-404页面搭建

# 详情
@home.route("/play/")
def play():
    return render_template("home/play.html")

# 404
@app.errorhandler(404)
def page_not_found(error):
    return render_template("common/404.html"), 404

# 5-1 管理员登录-后台布局搭建
搭建后台页面

管理员登录页面搭建
# 登录
@admin.route("/login/")
def login():
    return render_template("admin/login.html")

# 退出
@admin.route("/logout/")
def logout():
    return redirect(url_for("admin.login"))


# 5-2 修改密码-控制面板-标签管理页面搭建

后台布局搭建
# admin.html
{% block css %}...{% end %}
{% include "grid.html" %}
{% block content %}...{% end %}
{% block js %}...{% end %}

# 其它页面继承父模板
{% extends "admin/admin.html" %}
{% block css %}...{% end %}
{% include "grid.html" %}
{% block content %}...{% end %}
{% block js %}...{% end %}

修改密码
# 修改密码
@admin.route("/pwd/")
def pwd():
    return render_template("admin/pwd.html")

控制面板
# 系统管理
@admin.route("/")
def index():
    return render_template("admin/index.html")

标签管理页面搭建
# 编辑标签
@admin.route("/tag/add/")
def tag_add():
    return render_template("admin/tag_add.html")

# 标签列表
@admin.route("/tag/list/")
def tag_list():
    return render_template("admin/tag_list.html")

# 5-3 电影管理-上映预告管理页面搭建
电影管理页面搭建
# 编辑电影
@admin.route("/movie/add/")
def movie_add():
    return render_template("admin/movie_add.html")

# 电影列表
@admin.route("/movie/list/")
def movie_list():
    return render_template("admin/movie_list.html")

上映预告管理页面搭建

# 编辑上映预告
@admin.route("/preview/add/")
def preview_add():
    return render_template("admin/preview_add.html")

# 编辑预告列表
@admin.route("/preview/list/")
def preview_list():
    return render_template("admin/preview_list.html")


# 5-4 会员-收藏-评论管理页面搭建
会员管理页面搭建
# 会员列表
@admin.route("/user/list/")
def user_list():
    return render_template("admin/user_list.html")


# 查看会员
@admin.route("/user/view/")
def user_view():
    return render_template("admin/user_view.html")

评论管理页面搭建
# 评论列表
@admin.route("/comment/list/")
def comment_list():
    return render_template("admin/comment_list.html")


收藏管理页面搭建
# 收藏列表
@admin.route("/moviecol/list/")
def moviecol_list():
    return render_template("admin/moviecol_list.html")

# 5-5 收藏-日志-角色管理页面搭建
# 操作日志列表
@admin.route("/oplog/list/")
def oplog_list():
    return render_template("admin/oplog_list.html")


# 管理员日志管理页面搭建
@admin.route("/adminloginlog/list/")
def adminloginlog_list():
    return render_template("admin/adminloginlog_list.html")


# 会员日志管理页面搭建
# 会员日志列表
@admin.route("/userloginlog/list/")
def userloginlog_list():
    return render_template("admin/userloginlog_list.html")


角色管理页面搭建
# 添加角色
@admin.route("/role/add/")
def role_add():
    return render_template("admin/role_add.html")


# 角色列表
@admin.route("/role/list/")
def role_list():
    return render_template("admin/role_list.html")


权限管理页面搭建
# 添加权限
@admin.route("/auth/add/")
def auth_add():
    return render_template("admin/auth_add.html")


# 角色列表
@admin.route("/role/list/")
def auth_list():
    return render_template("admin/auth_list.html")

# 5-6 管理员管理页面搭建
# 添加管理员
@admin.route("/admin/add/")
def admin_add():
    return render_template("admin/admin_add.html")


# 管理员列表
@admin.route("/admin/list/")
def admin_list():
    return render_template("admin/admin_list.html")


# 6-1 管理员登陆
# 管理员登陆
1. app/__init__.py中创建对象
2. app/models.py中导入db对象
3. app/admin/forms.py中定义表单验证
4. app/templates/admin/login.html中使用表单字段、信息验证，消息闪现
5. app/admin/views.py中处理登录请求、保存会话
6. app/admin/views.py定义登录装饰器、访问控制

1. 模型: Admin
2. 表单：LoginForm
3. 请求方法：GET/POST
4. 访问控制： 无


# 6-2 标签管理
标签管理
1. 模型: Tag
2. 表单: TagForm
3. 请求方法: GET、POST
4. 访问控制：@admin_login_req


# 电影管理
1. 模型：Movie
2. 表单: MovieForm
3. 请求方法: GET、POST
4. 访问控制：@admin_login_req